openapi: 3.0.0
info:
  title: Foccacia
  description: This is a simple API for managing groups, Teams and Leagues
  contact:
    email: A51634@alunos.isel.pt
  license:
    name: Apache 2.0  
    url: http://www.apache.org/licenses/LICENSE-2.0.html 
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:3000/api
security:
  - bearerAuth: []
tags:
- name: Groups
- name: Users
- name: Teams
- name: Leagues
paths:
  /groups:
    get: 
      tags:
        - Groups
      summary: Returns a list of Groups depending on the user
      description: Returns a list of Groups depending on the user description
      OperationId: getGroups
      responses:
        200:
          description: A JSON array of all groups owned by that user
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                    description: 
                      type: string
                    updateCount:
                      type: integer
                      format: int64
                    ownerId:
                      type: integer
                      format: int64
                    teams: 
                      type: array
                  required:
                    - id
                    - name
                    - description
                    - updateCount
                    - ownerId
                    - teams
        404:
          $ref: "#/components/responses/404NotFound"
    post: 
        tags:
          - Groups
        summary: Adds a new Group to the list of Groups
        OperationId: addGroup
        security:
          .bearerAuth: []
        resquestBody:
          description: Adds a new Group to the list of Groups of a specific user
          required: true 
          content:
            application/json:
              schema:
                name: 
                  type: string
                description:
                  type: string
        responses: 
          201:
            description: Add a new Group to the JSON array of all groups owned by that user
            content: 
              application/json:
                schema:
                  type: object
                  properties:
                    description: 
                      type: string
                    uri: 
                      type: string
                      example: "/api/groups/1"
          400:
            $ref: "#/components/responses/400InvalidData"
          404:
            $ref: "#/components/responses/404NotFound"

  /groups/{groupId}:  
    get: 
      tags:
        - Groups
      summary: Returns a specific Group depending on the user and the GroupId
      description: Returns a specific Group depending on the user and the GroupId
      OperationId: getGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path 
        description: ID of group that to be searched
        required: true
        schema:
          type: Integer
          minimum: 0
      responses:
        200:
          description: A specific object Group owned by that user
          content: 
            application/json:
              schema:
                type: object 
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  description: 
                    type: string
                  updateCount:
                    type: integer
                    format: int64
                  ownerId:
                    type: integer
                    format: int64
                  teams: 
                    type: array
                required:
                  - id
                  - name
                  - description
                  - updateCount
                  - ownerId
                  - teams
        403:
            $ref: "#/components/responses/403NotAuthorized"
        404:
            $ref: "#/components/responses/404NotFound"
    put: 
      tags:
        - Groups
      summary: Updates data from a specific Group depending on the user and the GroupId
      OperationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group to be updated
        required: true
        schema:
          type: integer
      requestBody:
        description: Updates data, name and description, from a specific Group depending on the user and the GroupId
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                description:
                  type: string
      responses:
        200:
          description: A specific object Group owned by that user
          content: 
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  description: 
                    type: string
                  updateCount:
                    type: integer
                    format: int64
                  ownerId:
                    type: integer
                    format: int64
                  teams: 
                    type: array 
                required:
                  - id
                  - name
                  - description
                  - updateCount
                  - ownerId
                  - teams
        400:
          $ref: "#/components/responses/400InvalidData"
        403:
          $ref: "#/components/responses/403NotAuthorized"
        404:
          $ref: "#/components/responses/404NotFound"
        
    
    
    
    delete: 
      tags:
      - Groups
      summary: Delete a specific Group from the list of Groups
      description: Delete a specific Group from the list of Groups of a specific user
      operationId: deleteGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group to be deleted
        required: true
        schema:
          type: integer
      responses: 
        200:
          description: A JSON array of all groups owned by that user
          content: 
            application/json:
              schema:
                message: string
                example: Group with id 1 was deleted with success
        403:
          $ref: "#/components/responses/403NotAuthorized"
        404:
          $ref: "#/components/responses/404NotFound"


  /api/groups/{groupId}/{teamName}:
    delete: 
      tags:
        - Groups
      summary: Remove a specific team from a specific Group depending on the Team info and the user and the GroupId
      requestBody:
        description: Updates data, name and description, from a specific Group depending on the user and the GroupId
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                league: 
                  type: string
                season:
                  type: integer  
              required:
                - league
                - season  
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group
        required: true
        schema:
          type: integer
      - name: teamName
        in: path
        description: Name of the team to be removed
        required: true
        schema:
          type: integer
                  
      responses:
        200:
          description: Remove an specific Team defined by name season and League to a specific Group owned by that user"
          content: 
            application/json:
              schema:
                message: 
                  type: string
                  example: "Team with name Benfica removed from group with id 1"
        400:
          $ref: "#/components/responses/400InvalidData"
        403:
          $ref: "#/components/responses/403NotAuthorized"
        404:
          $ref: "#/components/responses/404NotFound"


    put:  
      tags:
      - Groups
      summary: Add a specific team from a specific Group depending on the Team info and the user and the GroupId
      operationId: addTeamToGroup
      requestBody:
        description: Updates data, name and description, from a specific Group depending on the user and the GroupId
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                league: 
                  type: string
                season:
                  type: integer  
              required:
                - league
                - season  
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of the group
        required: true
        schema:
          type: integer
          required: true
      - name: teamId
        in: path
        description: ID of the team to be removed
        required: true
        schema:
          type: integer
          required: true
        
      responses:
        200:
          description: Add an specific Team defined by name season and League to a specific Group owned by that user
          content: 
            application/json:
              schema:
                type: string   
                example: Team with name Benfica added to group with id 1
        400:
          $ref: "#/components/responses/400InvalidData"
        404:
          $ref: "#/components/responses/404NotFound"


  /api/teams: 
    description: Resouce that list all teams by name
    get:
      tags: 
      - Teams
      summary: List all teams
      description: Return a list of teams by name
      operationId: getTeams
      parameters:      
        - name: name
          in: query
          description: Filter teams by name
          schema: 
            type: string
          required: false
        - name: s
          in: query
          description: Number of teams to return
          schema:
            default: 30
            minimum: 0
            type: integer
        - name: p
          in: query
          description: The page number
          schema:
            maximum: 50
            minimum: 0
            default: 1
            type: integer
      responses:
        201:
          description: A list of teams matching the specified criterious and pagination
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 212
                    name:
                      type: string
                      example: "FC Porto"
                    venue:
                      type: string
                      nullable: true 
                      example: "Estádio Do Dragão"
        400:
          $ref: "#/components/responses/400InvalidData" 
        403:
          $ref: "#/components/responses/403NotAuthorized" 
        500:
          $ref: "#/components/responses/500InternalServerError" 



  /api/leagues: 
    description: Resouce that list all leagues by teamId
    get:
      tags: 
      - Leagues
      summary: List all leagues
      description: Return a list of leagues 
      operationId: getAllLeagues
      parameters:     
        - name: teamId
          in: query
          description: Filter leagues by teamId
          schema: 
            type: integer
          required: false
        - name: s
          in: query
          description: Number of teams to return
          schema:
            default: 30
            minimum: 0
            type: integer
        # - name: p
        #   in: query
        #   description: The page number
        #   schema:
        #     maximum: 50
        #     minimum: 0
        #     default: 1
        #     type: integer
      responses:
        201:
          description: A list of teams matching the specified criterious and pagination
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    team:
                      id:
                        type: integer
                        example: 1154
                      name:
                        type: string
                        example: "FC Porto"
                      venue:
                        type: string
                        example: "League"
                    leagues:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: Primeira Liga"
                          Id: 
                            type: Integer
                            example: 94
                          seasons:
                            type: array
                            items:
                              year: Integer
                              example: 2010
        400:
          $ref: "#/components/responses/400InvalidData"
        403:
          $ref: "#/components/responses/403NotAuthorized"
        500:
          $ref: "#/components/responses/500InternalServerError" 


  /api/user:
    post: 
      tags:
      - Users
      summary: Creates a new user and generates an token for that user
      requestBody:
        description: Creates a new user and generates an token for that user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: emailTest
                email:
                  type: string
                  example: TestEmailApi@gmail.com
      responses:
        201:
          description: A specific object user
            content: 
              application/json:
                schema:
                    Text:
                      type: User regitered with sucess
                    User:
                      type: object 
                        properties:
                          id:
                            type: integer
                            format: int64
                          name:
                            type: string
                          email: 
                            type: string
                          userToken:
                            type: string
                            format: uuid
                            example: 3efa8c5d-a9f4-4d71-be2d-8d9347e540c1
                        required:
                          - id
                          - name
                          - email
                          - userToken
        400:
          $ref: "#/components/responses/400InvalidData"


components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
  schemas:

    MissingParameter:  
      type: object
      properties:
        status: 
          type: integer
          example: 1
        body:
          type: string
          example: "Missing an required parameter"

    InvalidBody:  
      type: object
      properties:
      error:
          type: string
          example: "Invalid body content"

    NotFound: 
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/groups/5"
        description:
          type: string
          example: "Group with id 5 not found"

    NotAuthorized:
      type: object
      properties:
        error:
          type: string
          example: "User with id 5 does not own group with id 8"

    InvalidData:
      error:
        type: string
        example: `Username or email already in use


      InternalServerError:   
        type: object
        properties:
          message:
            type: string
            example: "Unexpected error. Contact your administrator"  

  responses: 
    404NotFound:
      description: "Resource not found"
      content: 
        application/json:
          schema: 
            $ref: "#/components/schemas/NotFound"
    400InvalidData:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content: 
        application/json:
          schema: 
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"
    403NotAuthorized:
      description: "User not authorized to perform this action"
      content: 
        application/json:
          schema: 
            $ref: "#/components/schemas/NotAuthorized"
    500InternalServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"         





      
                



        
        

                  
                
                  


      

          

          